{"version":3,"sources":["logo.svg","pages/nose/Edit.tsx","pages/nose/Index.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","Edit","props","handleOK","console","log","state","groupName","data","FormData","append","config","Axios","post","process","handleCancle","setState","visible","show","title","this","onCancel","onOk","labelCol","span","wrapperCol","Item","label","onChange","e","target","value","React","Component","Index","url","editLayer","onRef","ref","handleCreate","fetchData","get","then","res","onClick","size","dataSource","renderItem","item","actions","key","name","pagination","page","pageSize","total","Main","className","src","logo","alt","href","rel","App","exact","path","component","Nose","Boolean","window","location","hostname","match","require","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.c135d4c0.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\nimport { List, Typography, Form, Modal, Button, Input } from 'antd';\nimport 'antd/dist/antd.css'\nimport Axios from 'axios'\n\ninterface IProps {\n\n}\n\ninterface IState {\n  visible: boolean,\n  groupName: string,\n  config: string\n}\n\nclass Edit extends React.Component<IProps, IState> {\n  constructor(props: IProps) {\n    super(props)\n    this.state = {visible: false, groupName: \"\", config: \"\"}\n  }\n\n  handleOK = () => {\n    console.log(this.state.groupName)\n\n    let data = new FormData();\n    data.append('name', this.state.groupName);\n    data.append('config', this.state.config);\n\n    Axios.post(process.env.REACT_APP_HOST + '/admin/group', data)\n  }\n\n  handleCancle = () => {\n    this.setState({\n      visible: false\n    })\n  }\n\n  show = () => {\n    this.setState({\n      visible: true\n    })\n  }\n\n  render() {\n    return (\n        <Modal\n          title=\"Edit\"\n          visible={this.state.visible}\n          onCancel={this.handleCancle}\n          onOk={this.handleOK}\n        >\n          <Form labelCol={{span: 8}} wrapperCol={{span: 16}}>\n            <Form.Item label=\"Group Name:\">\n              <Input onChange={\n                (e: any) => {\n                  this.setState({\n                    groupName: e.target.value\n                  })\n                }\n              } />\n            </Form.Item>\n            <Form.Item label=\"Config:\">\n              <Input onChange={\n                (e: any) => {\n                  this.setState({\n                    config: e.target.value\n                  })\n                }\n              }/>\n            </Form.Item>\n          </Form>\n        </Modal>\n    );\n  }\n}\n\nexport default Edit;\n","import React from 'react';\nimport { List, Typography, Form, Modal, Button } from 'antd';\nimport 'antd/dist/antd.css'\nimport Edit from './Edit'\nimport Axios from 'axios'\n\nconst data: string[] = [\n  'line 1',\n  'line 2',\n  'line 3',\n  'line 4',\n  'line 5',\n  'line 6',\n  'line 7',\n  'line 8'\n];\n\ninterface IProps {\n\n}\n\ninterface IState {\n  data: []\n}\n\nconsole.log(process.env.REACT_APP_HOST)\n\nclass Index extends React.Component<IProps, IState> {\n  constructor(props: IProps) {\n    super(props)\n    this.state = {data: []}\n  }\n\n  url: string = process.env.REACT_APP_HOST + \"/admin/grouplist\"\n  editLayer: any = {}\n\n  onRef = (ref:any) => {\n    this.editLayer = ref\n  }\n\n  handleCreate = () => {\n    this.editLayer.show()\n  }\n\n  componentDidMount() {\n    this.fetchData()\n  }\n\n  fetchData = () => {\n    Axios.get(this.url).then(res => {\n      this.setState({\n        data: res.data\n      })\n    })\n  }\n\n  render() {\n    return (\n      <div>\n        <h3>Test nose!</h3>\n        <Button onClick={this.handleCreate}>新增</Button>\n        <Edit ref={this.onRef} />\n        <List \n        size=\"small\" \n        dataSource={ this.state.data } \n        renderItem={ (item:any) => <List.Item\n                                actions={[\n                                  <a key='list-loadmore-edit'>view</a>, \n                                  <a key='list-loadmore-edit'>edit</a>, \n                                  <a key='list-loadmore-del'>delete</a>]}\n                              >{ item.name }</List.Item> }\n        pagination={{\n          onChange: page => {\n            console.log(page)\n          },\n          pageSize: 3,\n          total: 20\n        }}\n        />\n      </div>\n    );\n  }\n}\n\nexport default Index;\n","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\n\nimport Nose from './pages/nose/Index';\n\nconst App: React.FC = () => {\n  return (\n    <div className=\"App\">\n      <Router>\n        <Route exact path=\"/\" component={ Main } />\n        <Route path=\"/nose\" component={ Nose } />\n      </Router>\n\n    </div>\n  );\n}\n\nconst Main: React.FC = () => {\n  return (\n    <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>\n          Edit <code>src/App.tsx</code> and save to reload.\n        </p>\n        <a\n          className=\"App-link\"\n          href=\"https://reactjs.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Learn React\n        </a>\n      </header>\n  )\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker'\nrequire('dotenv').config()\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}