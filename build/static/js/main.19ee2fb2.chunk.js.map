{"version":3,"sources":["logo.svg","pages/nose/Edit.tsx","pages/nose/Index.tsx","pages/nose/EditItem.tsx","pages/nose/ItemList.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","Edit","props","handleOK","console","log","state","groupName","data","FormData","append","config","Axios","post","process","handleCancle","setState","visible","show","title","this","onCancel","onOk","labelCol","span","wrapperCol","Item","label","onChange","e","target","value","React","Component","Index","pagination","url","editLayer","onRef","ref","handleCreate","fetchData","get","then","res","onClick","size","dataSource","renderItem","item","actions","to","id","key","name","page","pageSize","total","EditItem","modeID","content","groupID","relateID","ItemList","match","params","gid","rid","group_id","Main","className","src","logo","alt","href","rel","App","forceRefresh","exact","path","component","Nose","NoseItemList","withRouter","Boolean","window","location","hostname","require","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.19ee2fb2.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\nimport { List, Typography, Form, Modal, Button, Input } from 'antd';\nimport 'antd/dist/antd.css'\nimport Axios from 'axios'\n\ninterface IProps {\n\n}\n\ninterface IState {\n  visible: boolean,\n  groupName: string,\n  config: string\n}\n\nclass Edit extends React.Component<IProps, IState> {\n  constructor(props: IProps) {\n    super(props)\n    this.state = {visible: false, groupName: \"\", config: \"\"}\n  }\n\n  handleOK = () => {\n    console.log(this.state.groupName)\n\n    let data = new FormData();\n    data.append('name', this.state.groupName);\n    data.append('config', this.state.config);\n\n    Axios.post(process.env.REACT_APP_HOST + '/admin/group', data)\n  }\n\n  handleCancle = () => {\n    this.setState({\n      visible: false\n    })\n  }\n\n  show = () => {\n    this.setState({\n      visible: true\n    })\n  }\n\n  render() {\n    return (\n        <Modal\n          title=\"Edit\"\n          visible={this.state.visible}\n          onCancel={this.handleCancle}\n          onOk={this.handleOK}\n        >\n          <Form labelCol={{span: 8}} wrapperCol={{span: 16}}>\n            <Form.Item label=\"Group Name:\">\n              <Input onChange={\n                (e: any) => {\n                  this.setState({\n                    groupName: e.target.value\n                  })\n                }\n              } />\n            </Form.Item>\n            <Form.Item label=\"Config:\">\n              <Input onChange={\n                (e: any) => {\n                  this.setState({\n                    config: e.target.value\n                  })\n                }\n              }/>\n            </Form.Item>\n          </Form>\n        </Modal>\n    );\n  }\n}\n\nexport default Edit;\n","import React from 'react';\nimport { List, Typography, Form, Modal, Button } from 'antd';\nimport 'antd/dist/antd.css'\nimport Edit from './Edit'\nimport Axios from 'axios'\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link,\n  RouteComponentProps\n} from \"react-router-dom\"\n\nconst data: string[] = [\n  'line 1',\n  'line 2',\n  'line 3',\n  'line 4',\n  'line 5',\n  'line 6',\n  'line 7',\n  'line 8'\n];\n\ninterface IProps {\n\n}\n\ninterface IState {\n  data?: [],\n  pagination?: Object,\n}\n\ninterface RouteParams {\n  gid?: string,\n  rid?: string\n}\n\nclass Index extends React.Component<RouteComponentProps<RouteParams>, IState> {\n  state: Readonly<IState> = {\n    data: [],\n    pagination: []\n  }\n\n  readonly url: string = process.env.REACT_APP_HOST + \"/admin/list\"\n  editLayer: any\n\n  constructor(props: RouteComponentProps<RouteParams>) {\n    super(props)\n  }\n\n  onRef = (ref:any) => {\n    this.editLayer = ref\n  }\n\n  handleCreate = () => {\n    this.editLayer.show()\n  }\n\n  componentDidMount() {\n    this.fetchData()\n  }\n\n  fetchData = () => {\n    Axios.get(this.url).then(res => {\n      this.setState({\n        data: res.data\n      })\n    })\n  }\n\n  render() {\n    return (\n      <div>\n        <h3>Test nose!</h3>\n        <Button onClick={this.handleCreate}>新增</Button>\n        <Edit ref={this.onRef} />\n        <List \n        size=\"small\" \n        dataSource={ this.state.data } \n        renderItem={ (item:any) => <List.Item\n                                actions={[\n                                  <Link to={\"list/\" + item.id} key='list-loadmore-edit'>view</Link>, \n                                  <a key='list-loadmore-edit'>edit</a>, \n                                  <a key='list-loadmore-del'>delete</a>]}\n                              >{ item.name }</List.Item> }\n        pagination={{\n          onChange: page => {\n            console.log(page)\n          },\n          pageSize: 20,\n          total: 20\n        }}\n        />\n      </div>\n    );\n  }\n}\n\nexport default Index;\n","import React from 'react';\nimport { List, Typography, Form, Modal, Button, Input } from 'antd';\nimport 'antd/dist/antd.css'\nimport Axios from 'axios'\n\ninterface IProps {\n  groupID: string | undefined,\n  relateID: string | undefined\n}\n\ninterface IState {\n  visible: boolean,\n  groupName: string,\n  config: string,\n  modeID: string,\n  content: string\n}\n\nclass EditItem extends React.Component<IProps, IState> {\n  state: Readonly<IState> = {\n    visible: false,\n    groupName: \"\",\n    config: \"\",\n    modeID: \"0\",\n    content: \"\"\n  }\n\n  constructor(props: IProps) {\n    super(props)\n  }\n\n  handleOK = () => {\n    console.log(this.state.groupName)\n\n    let data = new FormData();\n    data.append('name', this.state.groupName);\n    data.append('config', this.state.config);\n    data.append('gid', this.props.groupID || \"0\")\n    data.append('rid', this.props.relateID || \"0\")\n    data.append('content', this.state.content)\n    data.append('mid', this.state.modeID)\n\n    Axios.post(process.env.REACT_APP_HOST + '/admin/item', data)\n  }\n\n  handleCancle = () => {\n    this.setState({\n      visible: false\n    })\n  }\n\n  show = () => {\n    this.setState({\n      visible: true\n    })\n  }\n\n  render() {\n    return (\n        <Modal\n          title=\"Edit\"\n          visible={this.state.visible}\n          onCancel={this.handleCancle}\n          onOk={this.handleOK}\n        >\n          <Form labelCol={{span: 8}} wrapperCol={{span: 16}}>\n            <Form.Item label=\"Groupd ID:\">{this.props.groupID}</Form.Item>\n            <Form.Item label=\"Relate ID:\">{this.props.relateID}</Form.Item>\n            <Form.Item label=\"Item Name:\">\n              <Input onChange={\n                (e: any) => {\n                  this.setState({\n                    groupName: e.target.value\n                  })\n                }\n              } />\n            </Form.Item>\n            <Form.Item label=\"Config:\">\n              <Input onChange={\n                (e: any) => {\n                  this.setState({\n                    config: e.target.value\n                  })\n                }\n              }/>\n            </Form.Item>\n            <Form.Item label=\"content:\">\n              <Input onChange={\n                (e: any) => {\n                  this.setState({\n                    content: e.target.value\n                  })\n                }\n              }/>\n            </Form.Item>\n            <Form.Item label=\"mode:\">\n              <Input onChange={\n                (e: any) => {\n                  this.setState({\n                    modeID: e.target.value\n                  })\n                }\n              }/>\n            </Form.Item>\n          </Form>\n        </Modal>\n    );\n  }\n}\n\nexport default EditItem;\n","import React from 'react';\nimport { List, Typography, Form, Modal, Button } from 'antd';\nimport 'antd/dist/antd.css'\nimport Edit from './EditItem'\nimport Axios from 'axios'\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link,\n  RouteComponentProps,\n  Redirect\n} from \"react-router-dom\"\n\ninterface IProps {\n\n}\n\ninterface IState {\n  data?: [],\n  pagination?: Object,\n  gid?: string,\n  rid?: string\n}\n\ninterface RouteParams {\n  gid?: string,\n  rid?: string\n}\n\nexport default class ItemList extends React.Component<RouteComponentProps<RouteParams>, IState> {\n  state: Readonly<IState> = {\n    data: [],\n    pagination: []\n  }\n\n  readonly url: string = process.env.REACT_APP_HOST + \"/admin/list\"\n  editLayer: any\n\n  constructor(props: RouteComponentProps<RouteParams>) {\n    super(props)\n  }\n\n  onRef = (ref:any) => {\n    this.editLayer = ref\n  }\n\n  handleCreate = () => {\n    this.editLayer.show()\n  }\n\n  componentDidMount() {\n    const {gid, rid} = this.props.match.params\n    console.log(gid, rid)\n    this.setState({\n      gid: gid,\n      rid: rid\n    })\n    this.fetchData()\n  }\n\n  \n\n  fetchData = () => {\n    const {gid, rid} = this.props.match.params\n    let url = this.url\n    if (gid) {\n      url += \"/\" + gid\n    }\n\n    if (gid && rid) {\n      url += \"/\" + rid\n    }\n\n    Axios.get(url).then(res => {\n      this.setState({\n        data: res.data\n      })\n    })\n  }\n\n  render() {\n    const {gid, rid} = this.props.match.params\n    \n    return (\n      <div>\n        <h3>Test item! {gid} {rid} | {this.state.gid} {this.state.rid}</h3>\n        <Button onClick={this.handleCreate}>新增</Button>\n        <Edit ref={this.onRef} groupID={gid} relateID={rid} />\n        <List \n        size=\"small\" \n        dataSource={ this.state.data }\n        renderItem={ (item:any) => <List.Item\n                                actions={[\n                                  <Link to={\"/list/\" + item.group_id + \"/\" + item.id} key='list-loadmore-edit'>view</Link>, \n                                  <a key='list-loadmore-edit'>edit</a>, \n                                  <a key='list-loadmore-del'>delete</a>]}\n                              >{ item.name }</List.Item> }\n        pagination={{\n          onChange: page => {\n            console.log(page)\n          },\n          pageSize: 20,\n          total: 20\n        }}\n        />\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport { BrowserRouter as Router, Route, Switch, withRouter } from 'react-router-dom';\n\nimport Nose from './pages/nose/Index'\nimport NoseItemList from './pages/nose/ItemList'\n\nconst App: React.FC = () => {\n  return (\n    <div className=\"App\">\n      <Router forceRefresh={true}>\n        <Switch>\n          <Route exact path=\"/\" component={ Main } />\n          <Route exact path=\"/list\" component={ Nose } />\n          <Route exact path=\"/list/:gid\" component={ NoseItemList } />\n          <Route exact path=\"/list/:gid/:rid\" component={ withRouter(NoseItemList) } />\n        </Switch>\n      </Router>\n\n    </div>\n  );\n}\n\nconst Main: React.FC = () => {\n  return (\n    <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>\n          Edit <code>src/App.tsx</code> and save to reload.\n        </p>\n        <a\n          className=\"App-link\"\n          href=\"https://reactjs.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Learn React\n        </a>\n      </header>\n  )\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker'\nrequire('dotenv').config()\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}