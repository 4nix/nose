{"version":3,"sources":["logo.svg","pages/nose/Edit.tsx","pages/nose/Index.tsx","pages/nose/List.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","Edit","props","handleOK","console","log","state","groupName","data","FormData","append","config","Axios","post","process","then","res","refresh","handleCancle","setState","visible","show","title","this","onCancel","onOk","labelCol","span","wrapperCol","Item","label","onChange","e","target","value","TextArea","autoSize","minRows","React","Component","Index","pagination","pageSize","url","groupUrl","editLayer","onRef","ref","handleCreate","handleDelete","item","Modal","confirm","content","id","name","delete","fetchData","get","list","total","length","style","margin","padding","width","border","onClick","size","dataSource","renderItem","actions","to","key","itemUrl","EditItem","gid","rid","type","children","callback","useState","setVisible","Form","useForm","form","reqUrl","resetFields","useEffect","setFieldsValue","qs","stringify","getFieldsValue","DeleteItem","NoseList","setData","fresh","setFresh","page","setPage","setPagination","param","useParams","params","group_id","Main","className","src","logo","alt","href","rel","App","exact","path","component","Nose","withRouter","Boolean","window","location","hostname","match","require","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.c2e625c2.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\nimport { List, Typography, Form, Modal, Button, Input } from 'antd';\nimport 'antd/dist/antd.css'\nimport Axios from 'axios'\n\ninterface IProps {\n  refresh: any\n}\n\ninterface IState {\n  visible: boolean,\n  groupName: string,\n  config: string\n}\n\nclass Edit extends React.Component<IProps, IState> {\n  constructor(props: IProps) {\n    super(props)\n    this.state = {visible: false, groupName: \"\", config: \"\"}\n  }\n\n  handleOK = () => {\n    console.log(this.state.groupName)\n\n    let data = new FormData();\n    data.append('name', this.state.groupName);\n    data.append('config', this.state.config);\n\n    Axios.post(process.env.REACT_APP_HOST + '/admin/group', data).then((res) => {\n      this.props.refresh()\n    })\n  }\n\n  handleCancle = () => {\n    this.setState({\n      visible: false\n    })\n  }\n\n  show = () => {\n    this.setState({\n      visible: true\n    })\n  }\n\n  render() {\n    return (\n        <Modal\n          title=\"Edit\"\n          visible={this.state.visible}\n          onCancel={this.handleCancle}\n          onOk={this.handleOK}\n        >\n          <Form labelCol={{span: 8}} wrapperCol={{span: 16}}>\n            <Form.Item label=\"Group Name:\">\n              <Input onChange={\n                (e: any) => {\n                  this.setState({\n                    groupName: e.target.value\n                  })\n                }\n              } />\n            </Form.Item>\n            <Form.Item label=\"Config:\">\n              <Input.TextArea onChange={\n                (e: any) => {\n                  this.setState({\n                    config: e.target.value\n                  })\n                }\n                }\n                autoSize={{ minRows: 2 }}\n              />\n            </Form.Item>\n          </Form>\n        </Modal>\n    );\n  }\n}\n\nexport default Edit;\n","import React from 'react';\nimport { List, Typography, Form, Modal, Button } from 'antd';\nimport 'antd/dist/antd.css'\nimport Edit from './Edit'\nimport Axios from 'axios'\nimport {\n  Link,\n  RouteComponentProps\n} from \"react-router-dom\"\n\ninterface IProps {\n\n}\n\ninterface IState {\n  data?: [],\n  pagination?: Object,\n}\n\ninterface RouteParams {\n  gid?: string,\n  rid?: string\n}\n\ninterface GroupInfo {\n  id: number,\n  name: string\n}\n\nclass Index extends React.Component<RouteComponentProps<RouteParams>, IState> {\n  state: Readonly<IState> = {\n    data: [],\n    pagination: {\n      pageSize: 20\n    }\n  }\n\n  readonly url: string = process.env.REACT_APP_HOST + \"/admin/list\"\n  readonly groupUrl: string = process.env.REACT_APP_HOST + \"/admin/group\"\n  editLayer: any\n\n  constructor(props: RouteComponentProps<RouteParams>) {\n    super(props)\n  }\n\n  onRef = (ref:any) => {\n    this.editLayer = ref\n  }\n\n  handleCreate = () => {\n    this.editLayer.show()\n  }\n\n  handleDelete = (item:GroupInfo) => {\n    Modal.confirm({\n      title: '确定要删除',\n      content: 'ID: ' + item.id + ', Name: ' + item.name,\n      onOk:() => {\n        Axios.delete(this.groupUrl + '/' + item.id).then(res => {\n          this.fetchData()\n        })\n      }\n    })\n  }\n\n  componentDidMount() {\n    this.fetchData()\n  }\n\n  fetchData = () => {\n    Axios.get(this.url).then(res => {\n      const { list } = res.data\n      this.setState({\n        data: list,\n        pagination: {\n          ...this.state.pagination,\n          total: res.data.length\n        }\n      })\n    })\n  }\n\n  render() {\n    return (\n      <div style={{margin: \"auto\", padding: \"5px\", width: \"90%\", border: \"1px solid #eee\"}}>\n        <h3>Test nose !</h3>\n        <Button onClick={this.handleCreate}>新增</Button>\n        <Edit ref={this.onRef} refresh={this.fetchData} />\n        <List \n        size=\"small\" \n        dataSource={this.state.data} \n        renderItem={(item:any) => <List.Item\n                                actions={[\n                                  <Link to={\"list/\" + item.id} key='list-loadmore-edit'>view</Link>, \n                                  <a key='list-loadmore-edit'>edit</a>, \n                                  <a key='list-loadmore-del' onClick={e => {\n                                    this.handleDelete(item)\n                                  }}>delete</a>]}\n                              >{ item.name }</List.Item>}\n        pagination={this.state.pagination}\n        />\n      </div>\n    );\n  }\n}\n\nexport default Index;\n","import React, { FC, useState, useEffect } from 'react'\nimport { List, Button, Modal, Form, Input } from 'antd'\nimport Axios from 'axios'\nimport qs from 'qs'\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link,\n  RouteComponentProps,\n  Redirect,\n  useParams\n} from \"react-router-dom\"\n\ninterface RouteParams {\n  gid?: string,\n  rid?: string\n}\n\ninterface EditFormParams extends RouteParams {\n  id?: string,\n  type?: any | undefined,\n  callback?: Function\n}\n\n\nconst url: string = process.env.REACT_APP_HOST + \"/admin/list\"\nconst itemUrl: string = process.env.REACT_APP_HOST + \"/admin/item\"\n\n\nconst NoseList: FC = () => {\n  const [data, setData] = useState<any>([])\n  const [fresh, setFresh] = useState<boolean>(false)\n  const [page, setPage] = useState<Number>(1)\n  const [pagination, setPagination] = useState<any>({\n    pageSize: 20,\n    onChange: (page: React.SetStateAction<Number>) => setPage(page)\n  })\n  const param = useParams<RouteParams>()\n\n  console.log(param)\n  const refresh = () => {\n    setFresh(!fresh)\n  }\n\n  useEffect(() => {\n    let reqUrl: string = url\n    if (param.gid) {\n      reqUrl += \"/\" + param.gid\n    }\n\n    if (param.gid && param.rid) {\n      reqUrl += \"/\" + param.rid\n    }\n\n    Axios.get(reqUrl, { params: { page: page }}).then(res => {\n      const { list, total } = res.data\n      \n      setData(list)\n      setPagination({ ...pagination, total: total })\n    })\n  }, [fresh, page])\n\n  return <div>\n    <h3>Gid: { param.gid}, Pid: { param.rid }</h3>\n    <EditItem gid={param.gid} rid={param.rid} callback={refresh}>新增</EditItem>\n    <List \n      size=\"small\" \n      dataSource={data}\n      renderItem={ (item:any) => <List.Item\n          actions={[\n            <Link to={\"/list/\" + item.group_id + \"/\" + item.id} key='list-loadmore-edit'>view</Link>, \n            <EditItem type='a' id={item.id} gid={param.gid} rid={param.rid} callback={refresh}>编辑</EditItem>, \n            <DeleteItem type='a' id={item.id} callback={refresh}>删除</DeleteItem>]}\n        >{ item.name }</List.Item> }\n      pagination={pagination}\n    />\n  </div>\n}\n\n\nconst EditItem: FC<EditFormParams> = ({ gid, rid, id, type, children, callback }) => {\n  const [visible, setVisible] = useState<boolean>(false)\n  const [form] = Form.useForm()\n  const reqUrl = itemUrl + (id ? '/' + id : '')\n  \n  const submit = () => {\n    Axios.post(reqUrl,\n      qs.stringify({...form.getFieldsValue(), rid: rid, gid: gid, id: id})\n    ).then(res => {\n      console.log(res)\n      setVisible(false)\n      callback && callback()\n    })\n  }\n\n  const show = () => {\n    form.resetFields()\n    setVisible(true)\n  }\n\n  useEffect(() => {\n    if (id && visible === true) {\n      Axios.get(reqUrl).then(res => {\n        const { data } = res\n        console.log(res)\n        form.setFieldsValue(data)\n      })\n    }\n  }, [visible])\n\n  return <>\n    {type === 'a' ? <a onClick={show}>{children}</a> : <Button type={type} onClick={show}>{children}</Button>}\n    <Modal\n      title={id ? \"编辑:\" + id : '新增'}\n      visible={visible}\n      onCancel={() => setVisible(false)}\n      onOk={submit}\n    >\n      <Form labelCol={{span: 8}} wrapperCol={{span: 16}} form={form}>\n        <Form.Item label=\"Groupd ID\">{gid}</Form.Item>\n        <Form.Item label=\"Relate ID\">{rid}</Form.Item>\n        <Form.Item label=\"Item Name\" name='name'>\n          <Input />\n        </Form.Item>\n        <Form.Item label=\"Config\" name='config'>\n          <Input.TextArea autoSize={{ minRows: 2 }} />\n        </Form.Item>\n        <Form.Item label=\"content\" name='content'>\n          <Input.TextArea autoSize={{ minRows: 3 }} />\n        </Form.Item>\n        <Form.Item label=\"mode\" name='model_id'>\n          <Input />\n        </Form.Item>\n      </Form>\n    </Modal>\n  </>\n}\n\nconst DeleteItem: FC<EditFormParams> = ({ id, children, callback, type }) => {\n  const { confirm } = Modal\n\n  const show = () => {\n    confirm({\n      title: '是否删除：' + id,\n      onOk: () => {\n        Axios.delete(itemUrl + '/' + id).then(res => {\n          callback && callback()\n        })\n      }\n    })\n  }\n\n  return <>\n    {type === 'a' ? <a onClick={show}>{children}</a> : <Button type={type} onClick={show}>{children}</Button>}\n  </>\n}\n\nexport default NoseList","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport { BrowserRouter as Router, Route, Switch, withRouter } from 'react-router-dom';\n\nimport Nose from './pages/nose/Index'\n// import NoseItemList from './pages/nose/ItemList'\nimport NoseList from './pages/nose/List'\n\nconst App: React.FC = () => {\n  return (\n    <div className=\"App\">\n      <Router>\n        <Switch>\n          <Route exact path=\"/\" component={ Main } />\n          <Route exact path=\"/list\" component={ Nose } />\n          <Route exact path=\"/list/:gid\" component={ NoseList } />\n          <Route exact path=\"/list/:gid/:rid\" component={ withRouter(NoseList) } />\n        </Switch>\n      </Router>\n\n    </div>\n  );\n}\n\nconst Main: React.FC = () => {\n  return (\n    <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>\n          Edit <code>src/App.tsx</code> and save to reload.\n        </p>\n        <a\n          className=\"App-link\"\n          href=\"https://reactjs.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Learn React\n        </a>\n      </header>\n  )\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker'\nrequire('dotenv').config()\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}